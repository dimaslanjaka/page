//const TerserPlugin = require('terser-webpack-plugin');
const { path } = require('sbg-utility');
var webpack = require('webpack');
const ResolveTypeScriptPlugin = require('resolve-typescript-plugin');
const nodeExternals = require('webpack-node-externals');
const HtmlWebPackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
//const webpackDevServer = require('webpack-dev-server');

/** @type {webpack.Configuration} */
const config = {
  entry: './src/index.js',
  watchOptions: {
    aggregateTimeout: 10000,
    poll: 1000,
    followSymlinks: true,
    ignored: /node_modules|tmp|tests|typings|dist/,
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new HtmlWebPackPlugin({
      template: './public/index.html',
      filename: 'index.html',
    }),
    new MiniCssExtractPlugin({
      filename: '[name].css',
      chunkFilename: '[id].css',
    }),
  ],
  module: {
    rules: [
      {
        test: /\.(png|jpg|svg|webp)$/,
        loader: 'file-loader',
      },
      {
        test: /\.(js|jsx)$/,
        include: path.join(__dirname, '/src'),
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
          },
        },
      },
      {
        test: /\.(ts|tsx)$/,
        use: 'ts-loader',
        exclude: /node_modules|.test.(ts|js)$/,
        devtool: 'inline-source-map',
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.scss$/,
        use: ['style-loader', 'css-loader', 'sass-loader'],
      },
    ],
  },
  resolve: {
    extensions: ['*', '.ts', '.js', '.jsx'],
    plugins: [new ResolveTypeScriptPlugin()],
    fallback: {
      crypto: require.resolve('crypto-browserify'),
      path: require.resolve('path-browserify'),
      fs: false,
      process: false,
    },
  },
  // https://webpack.js.org/configuration/dev-server/
  /**
   * @type {import('webpack-dev-server').Configuration}
   */
  devServer: {
    static: {
      watch: true,
      //directory: path.join(__dirname, 'dist'),
      serveIndex: true,
      publicPath: '/page',
    },
    hot: true,
    compress: true,
    allowedHosts: 'all',
    //port: 4000,
    open: false,
  },
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'public'),
    //sourceMapFilename: 'bundle.map',
    //library: 'safelinkify',
    //libraryTarget: 'umd',
    //globalObject: 'this',
  },
  //mode: fn.includes('.min') ? 'production' : 'development',
  externals: [nodeExternals()],
};

return config;

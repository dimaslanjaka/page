<!doctype html>
<html>

<head>
  <meta charset="utf-8" />
  <title>Hello Analytics - A quickstart guide for JavaScript</title>
</head>

<body>
  <button id="auth-button" hidden>Authorize</button>

  <h1>Hello Analytics</h1>

  <textarea cols="80" rows="20" id="query-output"></textarea>

  <script>
    // Replace with your client ID from the developer console.
    var CLIENT_ID = '974269993480-30i5epi0r6a9uiafq3rkpgsjuooe2t3q.apps.googleusercontent.com';

    // Set authorized scope.
    var SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'];

    // key to save credential for offline usage
    const KEY_LOCALSTORAGE = 'google_credential';

    function authorize(event) {
      // Handles the authorization flow.
      // `immediate` should be false when invoked from the button click.
      var useImmdiate = event ? false : true;
      var g_credential = {
        client_id: CLIENT_ID,
        scope: SCOPES,
        immediate: useImmdiate,
      };

      gapi.auth.authorize(g_credential, function (response) {
        var authButton = document.getElementById('auth-button');
        if (response.error) {
          authButton.hidden = false;
        } else {
          authButton.hidden = true;
          queryAccounts();
        }
      });
    }

    function queryAccounts() {
      // Load the Google Analytics client library.
      gapi.client.load('analytics', 'v3').then(function () {
        // Get a list of all Google Analytics accounts for this user
        gapi.client.analytics.management.accounts.list().then(handleAccounts);
      });
    }

    function handleAccounts(response) {
      // Handles the response from the accounts list method.
      if (response.result.items && response.result.items.length) {
        // Get the first Google Analytics account.
        var firstAccountId = response.result.items[0].id;

        console.log('all accounts', response.result.items)

        // Query for properties.
        queryProperties(firstAccountId);
      } else {
        console.log('No accounts found for this user.');
      }
    }

    function queryProperties(accountId) {
      // Get a list of all the properties for the account.
      gapi.client.analytics.management.webproperties
        .list({ accountId: accountId })
        .then(handleProperties)
        .then(null, function (err) {
          // Log any errors.
          console.log(err);
        });
    }

    function handleProperties(response) {
      // Handles the response from the webproperties list method.
      if (response.result.items && response.result.items.length) {
        // Get the first Google Analytics account
        var firstAccountId = response.result.items[0].accountId;

        // Get the first property ID
        var firstPropertyId = response.result.items[0].id;

        // Query for Views (Profiles).
        queryProfiles(firstAccountId, firstPropertyId);
      } else {
        console.log('No properties found for this user.');
      }
    }

    function queryProfiles(accountId, propertyId) {
      // Get a list of all Views (Profiles) for the first property
      // of the first Account.
      gapi.client.analytics.management.profiles
        .list({
          accountId: accountId,
          webPropertyId: propertyId,
        })
        .then(handleProfiles)
        .then(null, function (err) {
          // Log any errors.
          console.log(err);
        });
    }

    function handleProfiles(response) {
      // Handles the response from the profiles list method.
      if (response.result.items && response.result.items.length) {
        // Get the first View (Profile) ID.
        var firstProfileId = response.result.items[0].id;

        // Query the Core Reporting API.
        queryCoreReportingApi(firstProfileId);
      } else {
        console.log('No views (profiles) found for this user.');
      }
    }

    function queryCoreReportingApi(profileId) {
      // Query the Core Reporting API for the number sessions for
      // the past seven days.
      gapi.client.analytics.data.ga
        .get({
          ids: 'ga:' + profileId,
          'start-date': '7daysAgo',
          'end-date': 'today',
          metrics: 'ga:sessions',
        })
        .then(function (response) {
          var formattedJson = JSON.stringify(response.result, null, 2);
          document.getElementById('query-output').value = formattedJson;
        })
        .then(null, function (err) {
          // Log any errors.
          console.log(err);
        });
    }

    // Add an event listener to the 'auth-button'.
    document.getElementById('auth-button').addEventListener('click', authorize);
  </script>

  <script src="https://apis.google.com/js/client.js?onload=authorize"></script>
</body>

</html>
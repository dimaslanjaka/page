const paths = require('./paths');
const path = require('path');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
// const HtmlWebPackPlugin = require("html-webpack-plugin");
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');
const tsconfigJson = require('../tsconfig.json');
const webpackHtmlRoutes = require('./webpack.html');
const postcssOptions = require('../postcss.config');
const extensions = ['.scss', '.css', '.less', '.html', '.ts', '.js', '.jsx', '.tsx', '.json', '.otf'];
/**
 * Translates CSS into CommonJS
 * @type {import('webpack').RuleSetRule}
 */
const cssloader = {
  loader: 'css-loader',
  options: {
    // 1: Run `postcss-loader` on each CSS `@import` and CSS modules/ICSS imports, do not forget that `sass-loader` compile non CSS `@import`'s into a single file
    // 2: If you need run `sass-loader` and `postcss-loader` on each CSS `@import`
    importLoaders: 1,
    modules: {
      localIdentName: '[hash:base64]', // default
      auto: true // default
    },
    sourceMap: true
  }
};
/**
 * @type {import('webpack').RuleSetRule}
 */
const postcssloader = {
  loader: 'postcss-loader',
  options: { postcssOptions }
};

// const htmlPlugin = new HtmlWebPackPlugin({
// 	title: "Project Title",
// 	template: paths.public + "/index.html", // template file
// 	filename: "index.html", // output file
// });
/**
 * @type {import('webpack').Configuration}
 */
module.exports = {
  entry: [paths.src + '/index.tsx'],
  output: {
    path: paths.build,
    filename: '[name].bundle.js',
    // chunkFilename: `runtime/chunk/[name].[chunkhash].js`,
    assetModuleFilename: 'runtime/media/[name][hash][ext][query]',
    publicPath: paths.base,
    // clean output directory before emit
    clean: true
  },
  module: {
    rules: [
      {
        test: /\.(woff(2)?|eot|ttf|otf|svg|)$/,
        type: 'asset/resource', // <-- Assets module - asset/resource
        parser: {
          dataUrlCondition: {
            maxSize: 8 * 1024 // 8kb
          }
        },
        generator: {
          //If emitting file, the file path is
          filename: 'runtime/fonts/[hash][ext][query]'
        }
      },
      {
        test: /\.(?:ico|gif|png|jpg|jpeg)$/i,
        type: 'asset/resource', // <-- Assets module - asset/resource
        generator: {
          filename: 'runtime/images/[hash][ext][query]'
        }
      },
      {
        test: /\.(t|j|cj|mj)sx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: require('../.babelrc').config
        }
      },
      {
        test: /\.s[a|c]ss$/,
        use: [
          'style-loader',
          cssloader,
          postcssloader,
          // Compiles Sass to CSS
          {
            loader: 'sass-loader',
            options: {
              // Prefer `dart-sass`
              implementation: require('node-sass'),
              sassOptions: {
                includePaths: [path.join(__dirname, '../node_modules')]
              }
            }
          }
        ]
      },
      {
        test: /\.css$/,
        include: path.resolve(__dirname, '../src'),
        use: ['style-loader', cssloader, postcssloader]
      }
    ]
  },
  plugins: [new CleanWebpackPlugin(), ...webpackHtmlRoutes()],
  resolve: {
    extensions,
    // typescript import paths alias support
    alias: (() => {
      const paths = tsconfigJson.compilerOptions.paths;
      for (const key in paths) {
        if (Object.hasOwnProperty.call(paths, key)) {
          const resolvedValues = Array.isArray(paths[key])
            ? paths[key].map(source => {
                // resolve absolute path source
                return path.resolve(__dirname, source);
              })
            : path.resolve(__dirname, paths[key]);
          paths[key] = resolvedValues;
        }
      }
      return paths;
    })(),
    plugins: [
      // typescript import paths alias support
      new TsconfigPathsPlugin({
        configFile: path.resolve(__dirname, '../tsconfig.json'),
        extensions,
        baseUrl: path.resolve(__dirname, '..')
      })
    ]
  },
  optimization: {
    minimize: false
  }
};
